<?php
// Your code here!
 
abstract class Person{
     public $firstname;
     public $lastname;
     public function getFullName(){
        return $this->firstname. ' '. $this->lastname;
    }
}

 
 
class Student extends Person{
    private $studentNumber;
   
    
    public function __construct($firstname,$lastname,$studentNumber){
        $this->firstname= $firstname;
        $this->lastname= $lastname;
        $this->studentNumber= $studentNumber;
    }
    
   
    public function accept(Visitor $visitor){
       return $visitor->visitStudent($this);
    }
    
    public function getStudentNumber(){
        return $this->studentNumber;
    }
    
    
    
}

class Employee extends Person{
    private $sallary;
 
    
    public function __construct($firstname,$lastname,$sallary){
        $this->firstname= $firstname;
        $this->lastname= $lastname;
        $this->sallary= $sallary;
    }
    
    public function getSallary(){
        return $this->sallary;
    }
   
    
     public function accept(Visitor $visitor){
       return $visitor->visitEmployee($this);
    }
 
}






/**
 * undocumented class
 *
 * @package default
 * @author `g:snips_author`
 */
interface Visitor
{
    public function visitEmployee(Employee $employee);
    public function visitStudent(Student $student);
}



class VisitorExporter implements Visitor
{
    public function visitEmployee(Employee $employee){
        return "Employee name: ".$employee->getFullName()." , his sallary: ".$employee->getSallary()."";
    }
    public function visitStudent(Student $student){
        return "Student name: ".$student->getFullName()." , his  student card number: ".$student->getStudentNumber()."";
    }
 }







class PersonList {
    private $personList = [];
    
    public function addPerson(Person $person){
        $this->personList[] = $person; 
    }
    
     public function getPerson($index){
         if(isset($this->personList[$index])){
             return $this->personList[$index];
         }
         return null;
         
    }
      public function getCount(){
            
            return count($this->personList);
    }
    
}

class PersonListIterator {
    private $personList;
    private $currentPerson= 0;
    public function __construct($personList){
        $this->personList = $personList;
    }
    
    public function getCurrentPerson(){
        if($this->hasNextPerson()){
            return $this->personList->getPerson($this->currentPerson);
        }
        return null;
    }
    
    
    public function getNextPerson(){
         
        if($this->hasNextPerson()){
           return $this->personList->getPerson($this->currentPerson++); 
        }
        return null;
    }
    
    public function hasNextPerson(){
        if($this->personList->getCount()>$this->currentPerson){
            return true;
        }
        return false;
    }
}

class PersonRecerveListIterator extends PersonListIterator{
    
     public function __construct(PersonList $personList){
         $this->personList = $personList;
         $this->currentPerson= $this->personList->getCount()-1;
     }
     
     public function hasNextPerson(){
         if($this->currentPerson>=0){
             return true;
         }
         return false;
     }
     
     public function getNextPerson(){
        return $this->personList->getPerson($this->currentPerson--);
     }
     
}


 

$personList = new PersonList();

$personList->addPerson(new Student('Mohamad','Asaly',123132));
$personList->addPerson(new Student('Ivan','Ivanavich',123123));
$personList->addPerson(new Student('Alexye','Alexyvich',23132123));
$personList->addPerson(new Employee('mark','zag',5000));
$personList->addPerson(new Employee('Elon','Mask',1000));
$personList->addPerson(new Employee('Jako','chan',8000));
$personIteator = new PersonListIterator($personList);
$personRecerveListIterator = new PersonRecerveListIterator($personList);

$visitorExporter = new VisitorExporter();

while($personIteator->hasNextPerson()){
  $person =  $personIteator->getNextPerson();
  echo $person->accept($visitorExporter) . "\n";
}





// while($personRecerveListIterator->hasNextPerson()){
//   $student =  $personRecerveListIterator->getNextPerson();
//   echo $student->getFullName() . "\n";
// }
?>
