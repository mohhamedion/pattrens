/* Factory and car interfaces */

interface CarFactory
{
    public function makeCar(): Car;
}

interface Car
{
    public function getType(): string;
}

/* Concrete implementations of the factory and car */

class SedanFactory implements CarFactory
{
    public function makeCar(): Car
    {
        return new Sedan();
    }
}

class Sedan implements Car
{
    public function getType(): string
    {
        return 'Sedan';
    }
}

/* Client */

$factory = new SedanFactory();
$car = $factory->makeCar();
print $car->getType();




-----------

<?php
// interfaces
interface ICardFactory{
    public function createCard();
}

interface ICard {
     public function generatNumber();
}


abstract class BankCard {
    public $card;
    abstract public function createCard();
    
    public function getNumber(){
        $this->card = $this->createCard();
        
        return $this->card->number;
    }
    
}

///////
class CardFactoryForForginers extends BankCard implements ICardFactory {

    public function createCard(){
        return new ForginersCard();
    }
    
}
class CardFactoryForRF extends BankCard implements ICardFactory {
    
    public function createCard(){
        return new RFcard();    
    }
    
}

//

 

class ForginersCard  implements ICard{
     public $number;
    function __construct(){
        $this->generatNumber();
    }
 
    public function generatNumber(){
        $this->number = 'FG'.rand(111111111,10000000);
    }
   
    
}




class RFcard  implements ICard {
          public $number;

    function __construct(){
        $this->generatNumber();
    }
    
    public function generatNumber(){
        $this->number = 'RF'.rand(22222222,22222222);
    }
  
    
}

 
$card1 =  new CardFactoryForForginers();
$card2 = new CardFactoryForRF();
 

echo $card1->getNumber()."\n";
echo $card2->getNumber();
 


