/* Factory and car interfaces */

interface CarFactory
{
    public function makeCar(): Car;
}

interface Car
{
    public function getType(): string;
}

/* Concrete implementations of the factory and car */

class SedanFactory implements CarFactory
{
    public function makeCar(): Car
    {
        return new Sedan();
    }
}

class Sedan implements Car
{
    public function getType(): string
    {
        return 'Sedan';
    }
}

/* Client */

$factory = new SedanFactory();
$car = $factory->makeCar();
print $car->getType();




-----------

<?php


interface YoutubeFactory{
    public function createVideoLibrary();
    public function createMuiscLibrary();
}

class YoutubeFactoryForAdults implements YoutubeFactory {
    public function createVideoLibrary(){
        return new AdultVideoLibrary();
    }
     public function createMuiscLibrary(){
        return new AdultMusicLibrary();
    }
}

class YoutubeFactoryForChildren implements YoutubeFactory {
     public function createVideoLibrary(){
        return new ChiledVideoLibrary();
    }
     public function createMuiscLibrary(){
        return new ChiledMusicLibrary();
    }
}
interface ILibrary {
    public function render();
}
class AdultVideoLibrary implements ILibrary {
    public $link;
    public $author;
    public function render(){
        return 'render adult video';
    }
}
class AdultMusicLibrary implements ILibrary {
    public $link;
    public $author;
    
    public function render(){
        return 'render adult music';
    }
}


class ChiledVideoLibrary implements ILibrary {
    public $link;
    public $author;
    
    public function render(){
        return 'render chiled video';
    }
}
class ChiledMusicLibrary implements ILibrary {
       public $link;
       public $author;
    
    public function render(){
        return 'render chiled music';
    }
}



    //
    class YouTubeFactoryBuilder{
        public $factory;
        
        public function __construct($visitorAge){
            if($visitorAge>=18){
                $this->factory= new YoutubeFactoryForAdults();   
            }else{
                $this->factory= new YoutubeFactoryForChildren();   
            }
        }
        
        public function createNewFactory($factory_object){
             $this->factory = $factory_object;
            
        }
        
        public function getFactory(){
            return $this->factory;
        }
    }

///client code
    
    $bulder = new YouTubeFactoryBuilder(rand(0,100));
    $factory= $bulder->getFactory();
    $videoLibrary = $factory->createVideoLibrary();
    $musicLibrary = $factory->createMuiscLibrary();
    
     echo $videoLibrary->render()."\n";
     echo $musicLibrary->render();

    
    



